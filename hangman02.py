import random

def hangman():

    print(r"Bienvenido al AHORCADO")
    print(r"     i----I")
    print(r"     i    I")
    print(r"     O    I")
    print(r"    /I\   I")
    print(r"   / I \  I")
    print(r"    / \   I")
    print(r"   /   \  I")
    print(r"----------I")

    WORDS = [
        "perro", "gato", "casa", "arbol", "coche", "lapiz", "papel", "libro", "mesa", "silla",
        "flor", "sol", "luna", "estrella", "cielo", "mar", "rio", "pez", "ave", "nube",
        "niÃ±o", "niÃ±a", "tierra", "fuego", "viento", "agua", "puerta", "ventana", "reloj", "camino",
        "rojo", "verde", "azul", "negro", "blanco", "amarillo", "morado", "naranja", "gris", "rosa",
        "manzana", "pera", "uva", "pluma", "pan", "queso", "carro", "tren", "camion", "bici"
    ]

    selected_word = random.choice(WORDS)            ### Declaro la palabra aleatoria.
    print(selected_word)                            ### Este print es solo de prueba, debe eliminarse o comentarse.
    hidden_word = ['_' for _ in selected_word]      ### Represento la palabra con guiones bajos, se recorre con 'for' y un Ã­ndice 'sin importancia _ ' .(solo importa la cantidad de letras).
    attemps = 6                                     ### Se declara la cantidad de intentos.



    guessed_letter = set()  #(1.-)# Variable que almacena las letras ingresadas con 'set()'. Debe ser fuera del while, para que no se limpie y guarde la acumulaciÃ³n ingresada.

    while attemps > 0 and '_' in hidden_word:   #(2.-)# El programa seguirÃ¡ pidiendo letras 'mientras'(while):Intentos > a 0 Y existan '_' en la palabra escondida (hidden_word)
        print(" ".join(hidden_word))
        print(f"\nINTENTOS RESTANTES: {attemps}\n")
        print(f"\nLETRAS ADIVINADAS: " )



        user_input = input("INGRESA LETRA: ")
        if len(user_input) != 1 or not user_input.isalpha():
            print("INGRESA SOLO 1 LETRA")


        if user_input in guessed_letter:
            print("\n### LETRA EXISTE ###\n")
        else:
            guessed_letter.add(user_input)
            print("\n### LETRA NO EXISTE ###\n")




hangman()


#### EXPLICACIONES ###
"""
    #(1.-)# Un 'set' (conjunto) en Python es una colecciÃ³n desordenada de elementos Ãºnicos. Los conjuntos no 
            permiten elementos duplicados, lo que los hace ideales para almacenar cosas que no deben repetirse, 
            como las letras adivinadas en este caso.
    
    #(2.-)# El programa seguirÃ¡ pidiendo letras 'mientras'(while):Intentos > a 0 Y existan '_' en la palabra escondida (hidden_word)



            
"""



""" ChatGPT ConversaciÃ³n
CHAT: Preguntas Clave
      Â¿Hay algo que no quede claro de este proceso? Â¿Te gustarÃ­a una explicaciÃ³n mÃ¡s detallada de algÃºn punto especÃ­fico? ğŸ˜Š

Me: Me queda claro, lo que si es que ese tipo de usabilidad de ciertas herramientas no son claras en mi todavÃ­a, 
    ademas de saber cuando y como utilizarlas en momentos especÃ­ficos

CHAT: Es completamente normal que al principio cueste identificar quÃ© herramientas usar y cÃ³mo aplicarlas en el contexto adecuado. Es parte del proceso de aprendizaje en programaciÃ³n. Voy a darte algunos consejos prÃ¡cticos para mejorar en este aspecto:
    
    1. FamiliarÃ­zate con las herramientas bÃ¡sicas
    
    Antes de intentar combinaciones complejas, dedica tiempo a practicar herramientas comunes de Python y entender cÃ³mo funcionan por separado. Por ejemplo:
    
        Listas y sus operaciones bÃ¡sicas (append, remove, slicing, etc.).
        MÃ©todos de cadenas como .join(), .split(), .replace(), etc.
        Comprehensions para listas y diccionarios.
        Estructuras de control (for, if, etc.).
    
    Con ejercicios simples, puedes explorar cÃ³mo funcionan estas herramientas.
    2. Reconoce patrones comunes
    
    En muchos problemas, los programadores enfrentan retos similares una y otra vez. Al resolver ejercicios o analizar ejemplos, presta atenciÃ³n a patrones como:
    
        Generar una lista o cadena basada en otra estructura (como en el caso de hidden_word).
        Filtrar elementos (por ejemplo, seleccionar solo nÃºmeros pares de una lista).
        Transformar datos de un formato a otro (por ejemplo, listas a cadenas y viceversa).
    
    Cuanto mÃ¡s practiques, mÃ¡s naturales serÃ¡n estas asociaciones.
    3. Piensa en pasos lÃ³gicos
    
    Antes de codificar, desglosa el problema:
    
        Â¿QuÃ© necesito? En el caso del ahorcado, necesitas representar las letras ocultas.
        Â¿CÃ³mo lo represento? AquÃ­ decides usar una lista de guiones bajos.
        Â¿CÃ³mo lo muestro? AquÃ­ es donde aparece el uso de .join().
    
    Hacer este anÃ¡lisis paso a paso reduce la sensaciÃ³n de estar improvisando y facilita seleccionar las herramientas adecuadas.
    4. Prueba y error
    
    Experimenta y observa cÃ³mo se comporta el cÃ³digo:
    
        Â¿QuÃ© pasa si imprimes la lista directamente?
        Â¿QuÃ© sucede si cambias el separador de .join()?
        Â¿QuÃ© ocurre si usas otro tipo de comprensiÃ³n de lista?
    
    Este enfoque te ayuda a interiorizar no solo quÃ© hace una herramienta, sino tambiÃ©n por quÃ© y cÃ³mo se adapta al contexto.
    5. Resuelve problemas similares
    
    Para mejorar, practica problemas pequeÃ±os que requieran el uso de herramientas especÃ­ficas:
    
        Generar patrones visuales (como _ _ _ _ _).
        Transformar datos (como convertir "12345" en [1, 2, 3, 4, 5]).
        Manipular listas y cadenas en formas Ãºtiles.
    
    Puedes intentar desafÃ­os pequeÃ±os, como escribir un programa que:
    
        Cambie todas las vocales de una palabra por guiones bajos.
        Combine dos listas de nÃºmeros alternando sus elementos.
    
    6. SÃ© paciente
    
    Identificar herramientas y usarlas en el momento correcto es una habilidad que se desarrolla con tiempo y prÃ¡ctica. Lo importante es que sigas trabajando en resolver problemas, aunque sientas que aÃºn no es "natural". Con cada ejercicio, estarÃ¡s un paso mÃ¡s cerca de dominarlo.
    
    

"""








